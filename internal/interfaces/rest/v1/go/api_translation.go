/*
 * Go Clean Template API
 *
 * Using a translation service as an example
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/evrone/go-clean-template/config"
	"github.com/evrone/go-clean-template/internal/entity"
	"github.com/evrone/go-clean-template/internal/usecase"
	"github.com/evrone/go-clean-template/pkg/logger"
	"net/http"

	"github.com/gin-gonic/gin"
)

type historyResponse struct {
	History []entity.Translation `json:"history"`
}

type doTranslateRequest struct {
	Source      string `json:"source"       binding:"required"  example:"auto"`
	Destination string `json:"destination"  binding:"required"  example:"en"`
	Original    string `json:"original"     binding:"required"  example:"текст для перевода"`
}

// DoTranslate - Translate
func DoTranslate(c *gin.Context) {

	// TODO, cfg and logger should just be resolved by using DI using wire
	err, log, translationUseCase := prepare()

	var request doTranslateRequest
	if err := c.ShouldBindJSON(&request); err != nil {
		log.Error(err, "http - v1 - doTranslate")
		errorResponse(c, http.StatusBadRequest, "invalid request body")

		return
	}

	translation, err := translationUseCase.Translate(
		c.Request.Context(),
		entity.Translation{
			Source:      request.Source,
			Destination: request.Destination,
			Original:    request.Original,
		},
	)

	if err != nil {
		log.Error(err, "http - v1 - doTranslate")
		errorResponse(c, http.StatusInternalServerError, "translation service problems")

		return
	}

	c.JSON(http.StatusOK, translation)
}

// History - Show history
func History(c *gin.Context) {

	// TODO, cfg and logger should just be resolved by using DI using wire
	err, log, translationUseCase := prepare()

	translations, err := translationUseCase.History(c.Request.Context())
	if err != nil {
		log.Error(err, "http - v1 - history")
		errorResponse(c, http.StatusInternalServerError, "database problems")

		return
	}

	c.JSON(http.StatusOK, historyResponse{translations})
}

func prepare() (error, *logger.Logger, *usecase.TranslationUseCase) {
	cfg, err := config.NewConfig()
	if err != nil {
		panic(err)
	}

	log := logger.New(cfg.Log.Level)

	translationUseCase := usecase.New()
	return err, log, translationUseCase
}
