// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/evrone/go-clean-template/config"
	"github.com/evrone/go-clean-template/internal/controller/amqp_rpc"
	"github.com/evrone/go-clean-template/internal/usecase"
	"github.com/evrone/go-clean-template/internal/usecase/repository"
	"github.com/evrone/go-clean-template/internal/usecase/webapi"
	"github.com/evrone/go-clean-template/pkg/logger"
	"github.com/evrone/go-clean-template/pkg/postgres"
	"github.com/evrone/go-clean-template/pkg/rabbitmq/rmq_rpc/server"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func InitializePostgresConnection() *postgres.Postgres {
	configConfig := config.NewConfig()
	postgresPostgres := postgres.NewOrGetSingleton(configConfig)
	return postgresPostgres
}

func InitializeTranslationRepository() *repository.TranslationRepository {
	configConfig := config.NewConfig()
	postgresPostgres := postgres.NewOrGetSingleton(configConfig)
	translationRepository := repository.New(postgresPostgres)
	return translationRepository
}

func InitializeTranslationWebAPI() *webapi.TranslationWebAPI {
	translationWebAPI := webapi.New()
	return translationWebAPI
}

func InitializeTranslationUseCase() *usecase.TranslationUseCase {
	configConfig := config.NewConfig()
	postgresPostgres := postgres.NewOrGetSingleton(configConfig)
	translationRepository := repository.New(postgresPostgres)
	translationWebAPI := webapi.New()
	translationUseCase := usecase.New(translationRepository, translationWebAPI)
	return translationUseCase
}

func InitializeLogger() *logger.Logger {
	configConfig := config.NewConfig()
	loggerLogger := logger.New(configConfig)
	return loggerLogger
}

func InitializeNewRmqRpcServer() *server.Server {
	configConfig := config.NewConfig()
	loggerLogger := logger.New(configConfig)
	postgresPostgres := postgres.NewOrGetSingleton(configConfig)
	translationRepository := repository.New(postgresPostgres)
	translationWebAPI := webapi.New()
	translationUseCase := usecase.New(translationRepository, translationWebAPI)
	v := amqprpc.NewRouter(translationUseCase)
	serverServer := server.New(configConfig, loggerLogger, v)
	return serverServer
}

func InitializeNewRmqRpcServerWithConfig(config2 *config.Config) *server.Server {
	loggerLogger := logger.New(config2)
	postgresPostgres := postgres.NewOrGetSingleton(config2)
	translationRepository := repository.New(postgresPostgres)
	translationWebAPI := webapi.New()
	translationUseCase := usecase.New(translationRepository, translationWebAPI)
	v := amqprpc.NewRouter(translationUseCase)
	serverServer := server.New(config2, loggerLogger, v)
	return serverServer
}

// wire.go:

var deps = []interface{}{}

var providerSet wire.ProviderSet = wire.NewSet(postgres.NewOrGetSingleton, repository.New, webapi.New, usecase.New, logger.New, amqprpc.NewRouter, server.New)
